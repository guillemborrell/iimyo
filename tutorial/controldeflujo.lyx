#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Title
Tutorial de Matlab.
 Control de flujo
\end_layout

\begin_layout Standard
Se conoce como control de flujo de ejecución a las estructuras que modifican
 la secuencia de comandos, es decir, que producen que el código no se ejecute
 estrictamente línea por línea.
 Los dos más conocidos son los bucles y los condicionales.
\end_layout

\begin_layout Section
Condicionales.
\end_layout

\begin_layout Standard
Los condicionales también se llaman estructuras 
\emph on
if
\emph default
 debidas al nombre de la sentencia que las inicia.
 La estructura es muy sencilla, si se cumple una determinada condicion lógica
 se ejecuta lo que se encuentre en el nivel de ejecución interior al condiconal.
 Veamos la siguiente sesión de consola:
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=Matlab,numbers=left,numberstyle={\footnotesize},showstringspaces=false"
inline false
status collapsed

\begin_layout Standard

>> a=1
\end_layout

\begin_layout Standard

>> if a == true
\end_layout

\begin_layout Standard

disp ('hola')
\end_layout

\begin_layout Standard

else
\end_layout

\begin_layout Standard

disp ('adios')
\end_layout

\begin_layout Standard

end
\end_layout

\begin_layout Standard

hola
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Framed
status collapsed

\begin_layout Standard
NOTA: En Matlab cero es falso, cualquier otra cosa es verdadero, ya sea
 un número o un caracter.
\end_layout

\end_inset

Obviamente falta conocer más operadores de comparación y los condicionales
 completos.
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=Matlab,numbers=left,numberstyle={\footnotesize},showstringspaces=false"
inline false
status collapsed

\begin_layout Standard

>> a=3
\end_layout

\begin_layout Standard

a =  3
\end_layout

\begin_layout Standard

>> b=4
\end_layout

\begin_layout Standard

b =  4
\end_layout

\begin_layout Standard

>> if a==b
\end_layout

\begin_layout Standard

disp('a y b son iguales')
\end_layout

\begin_layout Standard

elseif a>b
\end_layout

\begin_layout Standard

disp('a es mayor que b')
\end_layout

\begin_layout Standard

elseif a<b
\end_layout

\begin_layout Standard

disp('a es menor que b')
\end_layout

\begin_layout Standard

else
\end_layout

\begin_layout Standard

disp('a y b no son comparables')
\end_layout

\begin_layout Standard

end
\end_layout

\begin_layout Standard

a es menor que b
\end_layout

\end_inset


\end_layout

\begin_layout Section
Bucles
\end_layout

\begin_layout Standard
Técnicamente en Matlab no hay bucles sino iteradores.
 Lo que hace la sentencia 
\emph on
for
\emph default
 es iterar sobre un vector, dando a la variable de la iteración cada vez
 el valor siguiente.
 Por ejemplo un vector.
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=Matlab,numbers=left,numberstyle={\footnotesize},showstringspaces=false"
inline false
status collapsed

\begin_layout Standard

>> v
\end_layout

\begin_layout Standard

v =
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

  1   2   3   4   5   6   7
\end_layout

\begin_layout Standard

>> for i=v
\end_layout

\begin_layout Standard

disp(i)
\end_layout

\begin_layout Standard

end
\end_layout

\begin_layout Standard

 1
\end_layout

\begin_layout Standard

 2
\end_layout

\begin_layout Standard

 3
\end_layout

\begin_layout Standard

 4
\end_layout

\begin_layout Standard

 5
\end_layout

\begin_layout Standard

 6
\end_layout

\begin_layout Standard

 7
\end_layout

\end_inset

Como siempre se puede utilizar una secuencia, que no es más que una abreviatura
 para el vector.
\end_layout

\begin_layout Section
Ejercicio
\end_layout

\begin_layout Standard
La serie de Fibonacci se define mediante la siguiente regla de recurrencia
\begin_inset Formula \[
F_{n}=\left\{ \begin{array}{cc}
0 & n=0\\
1 & n=1\\
F_{n-1}+F_{n-2} & n>1\end{array}\right.\]

\end_inset

Devolver un vector con los primeros cien términos de la serie de Fibonacci.
\end_layout

\end_body
\end_document
